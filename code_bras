include "mbed.h"
#include <string>
using namespace std;
unsigned int cardArg[16];
unsigned int cardCommand, cardArgCount;
DigitalOut myled(LED1);

Serial pc(SERIAL_TX, SERIAL_RX);

//Commandes Pince ===========================================================================================================
PwmOut ServG(D2); // Pin Servo droite
PwmOut ServD(D3); // Pin Servo gauche
PwmOut ServB(D10); // Pin Servo de base
//===========================================================================================================================

//Commande Tobogan =========================================================================================================
PwmOut ServB_d(D5); // Pin Servos Bas; Ouverture 0.00047; Fermeture 0.00215
PwmOut ServB_g(D6); // Ouverture 0.00047; Fermeture 0.00225
PwmOut ServM_d(D7); // Pin Servo Milieu; Ouverture 0.0009; Fermeture 0.00215
PwmOut ServM_g(D8); // Ouverture 0.00225; Fermeture 0.0006
PwmOut ServH_d(D9); // Pin Servo de Haut; Ouverture 0.0009; Fermeture 0.00215
PwmOut ServH_g(D11); // Ouverture 0.0016; Fermeture 0.00048
//=============================================================================================================================



//Fonctions Pince=====================================================================

void descendre(){ // Descente de la pince ouverte

    ServB.pulsewidth_us(1500);
    wait(0.1);
    ServB.pulsewidth_us(1070);
    ServG.pulsewidth_us(1950);
    ServD.pulsewidth_us(800);
}


void attrape_monte(){ //Attraper puis Monter

    ServG.pulsewidth_us(800);
    ServD.pulsewidth_us(2100);
    wait(1);
    ServB.pulsewidth_us(1750);
}


void lacher(){ // Lacher Cylindre
    ServG.pulsewidth_us(1000);
    ServD.pulsewidth_us(1900);
}
void ouvrir(){
    float impulsion_g=100*0.0013/180.0+0.0008; //160
    float impulsion_d=10*0.0013/180+0.0008; //0
    wait(0.5);
    for (int t=0;t<60;t++){
        ServG=1;
        wait(impulsion_g);
        ServG=0;
        ServD=1;
        wait(impulsion_d);
        ServD=0;
        wait(0.020);
    }
}
//=====================================================================================================

//Fonctions Tobo=======================================================================================

//ouverture Bas
void ouvertureBas(){
    ServB_d.pulsewidth_us(2150);
    ServB_g.pulsewidth_us(700);

}

//fermeture Bas
void fermetureBas(){
    ServB_d.pulsewidth_us(1000);
    ServB_g.pulsewidth_us(1700);
}

//Ouverture Milieu
void ouvertureMilieu(){
    ServM_d.pulsewidth_us(1500);
    ServM_g.pulsewidth_us(1700);

}

//Fermeture Milieu
void fermetureMilieu(){
     ServM_d.pulsewidth_us(1800);
     ServM_g.pulsewidth_us(800);
}

//Ouverture Haut
void ouvertureHaut(){
    ServH_d.pulsewidth_us(900);
    ServH_g.pulsewidth_us(2100);
}

//Fermeture Haut
void fermetureHaut(){
    ServH_d.pulsewidth_us(1600);
    ServH_g.pulsewidth_us(1400);
}
void deposer(){
    fermetureHaut();
    ouvertureMilieu();
    fermetureBas();
    ouvertureHaut();
    wait(1);
    fermetureHaut();
    fermetureMilieu();
    wait(1);
    ouvertureBas();
    ouvertureMilieu();
    wait(1);
    fermetureBas();
}
//===================================================================
void relacher(){
    ServB.pulsewidth_us(0);
    ServG.pulsewidth_us(0);
    ServD.pulsewidth_us(0);
    ServB_d.pulsewidth_us(0);
    ServB_g.pulsewidth_us(0);
    ServM_g.pulsewidth_us(0);
    ServM_d.pulsewidth_us(0);
    ServH_g.pulsewidth_us(0);
    ServM_g.pulsewidth_us(0);
 }
//Attention : ne pas donner plus de trois commandes pulsewidth à la suite sans wait(), la carte ST sature
void cyclePinceBas(){
    ServG.pulsewidth_us(800);
    ServD.pulsewidth_us(2100);
    wait(0.5);
    descendre();
    wait(1);
    attrape_monte();
    wait(1);
    lacher();
    wait(1);
    ServB.pulsewidth_us(1600);
    wait(0.5);
    ServB.pulsewidth_us(1700);
    wait(0.5);
    ServB.pulsewidth_us(1600);
    ouvertureHaut();
    wait(1);
    fermetureHaut();
    ServB.pulsewidth_us(1750);
    wait(0.5);
    ouvertureMilieu();
    wait(0.5);
    fermetureMilieu();
    wait(1);
    relacher();

}

void cycleDeposer(){
    ouvertureBas();
    wait(1);
    fermetureBas();
    ouvertureMilieu();
    wait(1);
    fermetureMilieu();
    wait(0.5);
    ouvertureHaut();
    wait(0.5);
    fermetureHaut();

}

//void Setup permet juste l'initialisation du Moniteur Série (ouvrir celui de l'Arduino) et d'établir une communication utilisateur - Carte
void setup()
{
    ServB.period_ms(20);
    ServG.period_ms(20);
    ServD.period_ms(20);
    ServB_d.period_ms(20);
    ServB_g.period_ms(20);
    ServM_g.period_ms(20);
    ServM_d.period_ms(20);
    ServH_g.period_ms(20);
    ServH_d.period_ms(20);
    fermetureBas();
    fermetureMilieu();
    fermetureHaut();
    wait(0.5);
    relacher();
}
//=====================================================


void main(){

    setup();

    while(1){
      if(pc.readable()){
        cardCommand = pc.getc();
        pc.putc(cardCommand);
        cardArgCount= pc.getc();

        for (int i = 0; i < cardArgCount; i++){
            pc.printf("test3");
            cardArg[i] = pc.getc();
        }

        switch(cardCommand)
        {
            case 0 :
                descendre();
                break;
            case 1 :
                attrape_monte();
                break;
            case 2 :
                lacher();
                break;
            case 3 :
                ouvertureBas();
                break;
            case 4 :
                fermetureBas();
                break;
            case 5 :
                ouvertureMilieu();
                break;
            case 6 :
                fermetureMilieu();
                break;
            case 7 :
                cycleDeposer();
                break;
            case 8 :
                cyclePinceBas();
                break;
            case 9:
                relacher();
                break;
            }
        }
    }

}



void ouvertureHaut(){
    ServH_d.pulsewidth_us(2100);
    ServH_g.pulsewidth_us(900);
}

//Fermeture Haut
void fermetureHaut(){
    ServH_d.pulsewidth_us(1400);
    ServH_g.pulsewidth_us(1600);
}
void deposer(){
    fermetureHaut();
    ouvertureMilieu();
    fermetureBas();
    ouvertureHaut();
    wait(1);
    fermetureHaut();
    fermetureMilieu();
    wait(1);
    ouvertureBas();
    ouvertureMilieu();
    wait(1);
    fermetureBas();
}
//===================================================================
void relacher(){
    ServB.pulsewidth_us(0);
    ServG.pulsewidth_us(0);
    ServD.pulsewidth_us(0);
    ServB_d.pulsewidth_us(0);
    ServB_g.pulsewidth_us(0);
    ServM_g.pulsewidth_us(0);
    ServM_d.pulsewidth_us(0);
    ServH_g.pulsewidth_us(0);
    ServM_g.pulsewidth_us(0);
 }
//Attention : ne pas donner plus de trois commandes pulsewidth à la suite sans wait(), la carte ST sature
void cyclePinceBas(){
    ServG.pulsewidth_us(800);
    ServD.pulsewidth_us(2100);
    wait(0.5);
    descendre();
    wait(1);
    attrape_monte();
    wait(1);
    lacher();
    wait(1);
    ServB.pulsewidth_us(1600);
    wait(0.5);
    ServB.pulsewidth_us(1700);
    wait(0.5);
    ServB.pulsewidth_us(1600);
    ouvertureHaut();
    wait(1);
    fermetureHaut();
    ServB.pulsewidth_us(1750);
    wait(0.5);
    ouvertureMilieu();
    wait(0.5);
    fermetureMilieu();
    wait(1);
    relacher();

}

void cycleDeposer(){
    ouvertureBas();
    wait(1);
    fermetureBas();
    ouvertureMilieu();
    wait(1);
    fermetureMilieu();
    wait(0.5);
    ouvertureHaut();
    wait(0.5);
    fermetureHaut();

}

//void Setup permet juste l'initialisation du Moniteur Série (ouvrir celui de l'Arduino) et d'établir une communication utilisateur - Carte
void setup()
{
    ServB.period_ms(20);
    ServG.period_ms(20);
    ServD.period_ms(20);
    ServB_d.period_ms(20);
    ServB_g.period_ms(20);
    ServM_g.period_ms(20);
    ServM_d.period_ms(20);
    ServH_g.period_ms(20);
    ServM_g.period_ms(20);
    fermetureBas();
    fermetureMilieu();
    fermetureHaut();
    wait(0.5);
    relacher();
}
//=====================================================


void main(){

    setup();


    while(1){
      if(pc.readable()){
        cardCommand = pc.getc();
        pc.putc(cardCommand);
        cardArgCount= pc.getc();

        for (int i = 0; i < cardArgCount; i++){
            pc.printf("test3");
            cardArg[i] = pc.getc();
        }

        switch(cardCommand)
        {
            case 0 :
                descendre();
                break;
            case 1 :
                attrape_monte();
                break;
            case 2 :
                lacher();
                break;
            case 3 :
                ouvertureBas();
                break;
            case 4 :
                fermetureBas();
                break;
            case 5 :
                ouvertureMilieu();
                break;
            case 6 :
                fermetureMilieu();
                break;
            case 7 :
                cycleDeposer();
                break;
            case 8 :
                cyclePinceBas();
                break;
            case 9:
                relacher();
                break;
            }
        }
    }

}
